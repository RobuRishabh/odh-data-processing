FROM quay.io/modh/odh-workbench-jupyter-minimal-cuda-py312-ubi9@sha256:f7126e237f1dfe3a4cda89b60c4e8d9e45afabb247030765edb1c5532a7010fc

USER root

# Enable EPEL and install build dependencies
RUN rpm -Uvh --nosignature https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm || true && \
    dnf -y install \
      git gcc gcc-c++ make autoconf automake libtool pkgconfig \
      zlib-devel libjpeg-turbo-devel libpng-devel libtiff-devel libwebp-devel openjpeg2-devel

# Build and install Leptonica from source
ENV LEPTONICA_VERSION=1.83.1
RUN curl -L -o /tmp/leptonica.tar.gz https://github.com/DanBloomberg/leptonica/archive/refs/tags/${LEPTONICA_VERSION}.tar.gz && \
    tar -xzf /tmp/leptonica.tar.gz -C /tmp && \
    cd /tmp/leptonica-${LEPTONICA_VERSION} && \
    ./autogen.sh && \
    ./configure && \
    make -j"$(nproc)" && \
    make install && \
    ldconfig && \
    rm -rf /tmp/leptonica*

# Ensure build and runtime can find Leptonica from /usr/local
ENV PKG_CONFIG_PATH="/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:${PKG_CONFIG_PATH}"
ENV LD_LIBRARY_PATH="/usr/local/lib64:/usr/local/lib:${LD_LIBRARY_PATH}"
ENV LIBLEPT_HEADERSDIR="/usr/local/include"

# Build and install Tesseract from source
ENV TESSERACT_VERSION=5.4.1
RUN git clone --depth=1 --branch ${TESSERACT_VERSION} https://github.com/tesseract-ocr/tesseract /tmp/tesseract && \
    cd /tmp/tesseract && \
    ./autogen.sh && \
    ./configure --disable-static && \
    make -j"$(nproc)" && \
    make install && \
    ldconfig && \
    rm -rf /tmp/tesseract

# Install language data
ENV TESSDATA_VERSION=4.1.0
ENV TESSDATA_PREFIX="/usr/share/tesseract/tessdata"
RUN mkdir -p ${TESSDATA_PREFIX} && \
    git clone --depth=1 --branch ${TESSDATA_VERSION} https://github.com/tesseract-ocr/tessdata ${TESSDATA_PREFIX}

# Build and install tesserocr from source (uses pkg-config to find tesseract/leptonica)
RUN python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    python3 -m pip install --no-binary=:all: tesserocr

USER 1001

# Clone the repository to a temporary, non-mounted directory
RUN git clone https://github.com/opendatahub-io/odh-data-processing.git /opt/app-root/tmp/odh-data-processing

# Copy a custom entrypoint script into the container
COPY --chown=1001:1 odh-dp-entrypoint.sh /opt/app-root/bin/odh-dp-entrypoint.sh

# Ensure script is executable at the user and group level
RUN chmod ug+x /opt/app-root/bin/odh-dp-entrypoint.sh

# Check to make sure entry point script can be executed by random high number user
RUN ls -l /opt/app-root/bin/odh-dp-entrypoint.sh

# Set the NOTEBOOK_ROOT_DIR to the final destination in the user's home directory
ENV NOTEBOOK_ROOT_DIR="/opt/app-root/src/odh-data-processing/notebooks/use-cases"

# Set the custom script as the new entrypoint
ENTRYPOINT ["/opt/app-root/bin/odh-dp-entrypoint.sh"]

# PIPELINE DEFINITION
# Name: convert-pipeline
# Inputs:
#    num_splits: int [Default: 3.0]
#    pdf_backend: str [Default: 'dlparse_v4']
components:
  comp-create-pdf-splits:
    executorLabel: exec-create-pdf-splits
    inputDefinitions:
      artifacts:
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        num_splits:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: LIST
  comp-docling-convert:
    executorLabel: exec-docling-convert
    inputDefinitions:
      artifacts:
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        pdf_backend:
          parameterType: STRING
        pdf_split:
          parameterType: LIST
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-for-loop-1:
    dag:
      tasks:
        docling-convert:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-docling-convert
          inputs:
            artifacts:
              input_path:
                componentInputArtifact: pipelinechannel--import-test-pdfs-output_path
            parameters:
              pdf_backend:
                componentInputParameter: pipelinechannel--pdf_backend
              pdf_split:
                componentInputParameter: pipelinechannel--create-pdf-splits-Output-loop-item
          taskInfo:
            name: docling-convert
    inputDefinitions:
      artifacts:
        pipelinechannel--import-test-pdfs-output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--create-pdf-splits-Output:
          parameterType: LIST
        pipelinechannel--create-pdf-splits-Output-loop-item:
          parameterType: LIST
        pipelinechannel--pdf_backend:
          parameterType: STRING
  comp-import-test-pdfs:
    executorLabel: exec-import-test-pdfs
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-create-pdf-splits:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_pdf_splits
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_pdf_splits(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    num_splits: int,\n) -> List[List[str]]:\n    import pathlib\n\n   \
          \ all_pdfs = [path.name for path in pathlib.Path(input_path.path).glob(\"\
          *.pdf\")]\n    return [all_pdfs[i::num_splits] for i in range(num_splits)]\n\
          \n"
        image: python:3.11
    exec-docling-convert:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - docling_convert
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef docling_convert(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    pdf_split: List[str],\n    pdf_backend: str,\n    output_path: dsl.Output[dsl.Artifact],\n\
          ):\n    import pathlib\n    import os\n    from importlib import import_module\n\
          \n    from docling_core.types.doc.base import ImageRefMode\n    from docling.datamodel.base_models\
          \ import InputFormat\n    from docling.datamodel.pipeline_options import\
          \ PdfPipelineOptions, PdfBackend\n    from docling.document_converter import\
          \ DocumentConverter, PdfFormatOption\n\n    os.environ[\"DOCLING_ARTIFACTS_PATH\"\
          ] = \"/opt/app-root/src/.cache/docling/models\"\n\n    input_dir_p = pathlib.Path(input_path.path)\n\
          \    output_dir_p = pathlib.Path(output_path.path)\n    output_dir_p.mkdir(parents=True,\
          \ exist_ok=True)\n\n    input_pdfs = [input_dir_p / name for name in pdf_split]\n\
          \n    pipeline_options = PdfPipelineOptions()\n    pipeline_options.generate_page_images\
          \ = True\n\n    allowed_backends = {e.value for e in PdfBackend}\n    if\
          \ pdf_backend not in allowed_backends:\n        raise ValueError(\n    \
          \        f\"Invalid pdf_backend: {pdf_backend}. Must be one of {sorted(allowed_backends)}\"\
          \n        )\n\n    backend_to_impl = {\n        PdfBackend.PYPDFIUM2.value:\
          \ (\n            \"docling.backend.pypdfium2_backend\",\n            \"\
          PyPdfiumDocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V1.value:\
          \ (\n            \"docling.backend.docling_parse_backend\",\n          \
          \  \"DoclingParseDocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V2.value:\
          \ (\n            \"docling.backend.docling_parse_v2_backend\",\n       \
          \     \"DoclingParseV2DocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V4.value:\
          \ (\n            \"docling.backend.docling_parse_v4_backend\",\n       \
          \     \"DoclingParseV4DocumentBackend\",\n        ),\n    }\n    module_name,\
          \ class_name = backend_to_impl[pdf_backend]\n    backend_class = getattr(import_module(module_name),\
          \ class_name)\n\n    doc_converter = DocumentConverter(\n        format_options={\n\
          \            InputFormat.PDF: PdfFormatOption(\n                pipeline_options=pipeline_options,\n\
          \                backend=backend_class,\n            )\n        }\n    )\n\
          \n    conv_results = doc_converter.convert_all(input_pdfs, raises_on_error=True)\n\
          \    for conv_res in conv_results:\n        doc_filename = conv_res.input.file.stem\n\
          \        output_json_path = output_dir_p / f\"{doc_filename}.json\"\n  \
          \      conv_res.document.save_as_json(output_json_path, image_mode=ImageRefMode.PLACEHOLDER)\n\
          \n"
        image: quay.io/fabianofranz/docling:v2.43.0
    exec-import-test-pdfs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - import_test_pdfs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.13.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'gitpython'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef import_test_pdfs(\n    output_path: dsl.Output[dsl.Artifact],\n\
          ):\n    import os\n    import shutil\n    from git import Repo\n\n    output_dir\
          \ = output_path.path\n\n    docling_github_repo = \"https://github.com/docling-project/docling/\"\
          \n    full_repo_path = os.path.join(output_dir, \"docling\")\n    Repo.clone_from(docling_github_repo,\
          \ full_repo_path, branch=\"v2.43.0\")\n\n    pdfs_path = os.path.join(full_repo_path,\
          \ \"tests\", \"data\", \"pdf\")\n    shutil.copytree(pdfs_path, output_dir,\
          \ dirs_exist_ok=True)\n\n    shutil.rmtree(full_repo_path)\n\n"
        image: python:3.11
pipelineInfo:
  name: convert-pipeline
root:
  dag:
    tasks:
      create-pdf-splits:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-create-pdf-splits
        dependentTasks:
        - import-test-pdfs
        inputs:
          artifacts:
            input_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-test-pdfs
          parameters:
            num_splits:
              componentInputParameter: num_splits
        taskInfo:
          name: create-pdf-splits
      for-loop-1:
        componentRef:
          name: comp-for-loop-1
        dependentTasks:
        - create-pdf-splits
        - import-test-pdfs
        inputs:
          artifacts:
            pipelinechannel--import-test-pdfs-output_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-test-pdfs
          parameters:
            pipelinechannel--create-pdf-splits-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: create-pdf-splits
            pipelinechannel--pdf_backend:
              componentInputParameter: pdf_backend
        parameterIterator:
          itemInput: pipelinechannel--create-pdf-splits-Output-loop-item
          items:
            inputParameter: pipelinechannel--create-pdf-splits-Output
        taskInfo:
          name: for-loop-1
      import-test-pdfs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-import-test-pdfs
        taskInfo:
          name: import-test-pdfs
  inputDefinitions:
    parameters:
      num_splits:
        defaultValue: 3.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      pdf_backend:
        defaultValue: dlparse_v4
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.13.0

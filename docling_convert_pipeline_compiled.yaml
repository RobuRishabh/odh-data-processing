# PIPELINE DEFINITION
# Name: data-processing-docling-pipeline
# Description: Docling convert pipeline by the Data Processing Team
# Inputs:
#    num_splits: int [Default: 3.0]
#    pdf_backend: str [Default: 'dlparse_v4']
#    pdf_base_url: str [Default: 'https://github.com/docling-project/docling/raw/v2.43.0/tests/data/pdf']
#    pdf_filenames: str [Default: '2203.01017v2.pdf,2206.01062.pdf,2305.03393v1-pg9.pdf,2305.03393v1.pdf,amt_handbook_sample.pdf,code_and_formula.pdf,multi_page.pdf,redp5110_sampled.pdf']
components:
  comp-create-pdf-splits:
    executorLabel: exec-create-pdf-splits
    inputDefinitions:
      artifacts:
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the input directory containing PDF files.
      parameters:
        num_splits:
          description: Number of splits to create.
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: LIST
  comp-docling-convert:
    executorLabel: exec-docling-convert
    inputDefinitions:
      artifacts:
        artifacts_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the directory containing Docling models.
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the input directory containing PDF files.
      parameters:
        pdf_backend:
          description: Backend to use for PDF processing.
          parameterType: STRING
        pdf_split:
          description: List of PDF file names to process.
          parameterType: LIST
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-download-docling-models:
    executorLabel: exec-download-docling-models
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-for-loop-1:
    dag:
      tasks:
        docling-convert:
          cachingOptions: {}
          componentRef:
            name: comp-docling-convert
          inputs:
            artifacts:
              artifacts_path:
                componentInputArtifact: pipelinechannel--download-docling-models-output_path
              input_path:
                componentInputArtifact: pipelinechannel--import-pdfs-output_path
            parameters:
              pdf_backend:
                componentInputParameter: pipelinechannel--pdf_backend
              pdf_split:
                componentInputParameter: pipelinechannel--create-pdf-splits-Output-loop-item
          taskInfo:
            name: docling-convert
    inputDefinitions:
      artifacts:
        pipelinechannel--download-docling-models-output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        pipelinechannel--import-pdfs-output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--create-pdf-splits-Output:
          parameterType: LIST
        pipelinechannel--create-pdf-splits-Output-loop-item:
          parameterType: LIST
        pipelinechannel--pdf_backend:
          parameterType: STRING
  comp-import-pdfs:
    executorLabel: exec-import-pdfs
    inputDefinitions:
      parameters:
        pdf_base_url:
          parameterType: STRING
        pdf_filenames:
          description: List of PDF filenames to import.
          parameterType: STRING
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-create-pdf-splits:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_pdf_splits
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_pdf_splits(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    num_splits: int,\n) -> List[List[str]]:\n    \"\"\"\n    Create a list\
          \ of PDF splits.\n\n    Args:\n        input_path: Path to the input directory\
          \ containing PDF files.\n        num_splits: Number of splits to create.\n\
          \    \"\"\"\n    from pathlib import Path\n\n    input_path_p = Path(input_path.path)\n\
          \n    all_pdfs = [path.name for path in input_path_p.glob(\"*.pdf\")]\n\
          \    return [all_pdfs[i::num_splits] for i in range(num_splits)]\n\n"
        image: python:3.11
    exec-docling-convert:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - docling_convert
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef docling_convert(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    pdf_split: List[str],\n    pdf_backend: str,\n    artifacts_path: dsl.Input[dsl.Artifact],\n\
          \    output_path: dsl.Output[dsl.Artifact],\n):\n    \"\"\"\n    Convert\
          \ a list of PDF files to JSON and Markdown using Docling.\n\n    Args:\n\
          \        input_path: Path to the input directory containing PDF files.\n\
          \        pdf_split: List of PDF file names to process.\n        pdf_backend:\
          \ Backend to use for PDF processing.\n        artifacts_path: Path to the\
          \ directory containing Docling models.\n        output_path: Path to the\
          \ output directory for JSON and Markdown files.\n    \"\"\"\n    import\
          \ os\n    from importlib import import_module\n    from pathlib import Path\n\
          \n    from docling_core.types.doc.base import ImageRefMode  # pylint: disable=import-outside-toplevel\
          \  # noqa: PLC0415, E402\n    from docling.datamodel.base_models import\
          \ InputFormat  # pylint: disable=import-outside-toplevel  # noqa: PLC0415,\
          \ E402\n    from docling.datamodel.pipeline_options import (  # pylint:\
          \ disable=import-outside-toplevel  # noqa: PLC0415, E402\n        PdfPipelineOptions,\n\
          \        PdfBackend,\n        TableFormerMode,\n    )\n    from docling.document_converter\
          \ import DocumentConverter, PdfFormatOption  # pylint: disable=import-outside-toplevel\
          \  # noqa: PLC0415, E402\n\n    allowed_backends = {e.value for e in PdfBackend}\n\
          \    if pdf_backend not in allowed_backends:\n        raise ValueError(\n\
          \            f\"Invalid pdf_backend: {pdf_backend}. Must be one of {sorted(allowed_backends)}\"\
          \n        )\n\n    input_path_p = Path(input_path.path)\n    artifacts_path_p\
          \ = Path(artifacts_path.path)\n    output_path_p = Path(output_path.path)\n\
          \    output_path_p.mkdir(parents=True, exist_ok=True)\n\n    input_pdfs\
          \ = [input_path_p / name for name in pdf_split]\n    print(f\"docling-convert:\
          \ starting with backend='{pdf_backend}', files={len(input_pdfs)}\", flush=True)\n\
          \n    pipeline_options = PdfPipelineOptions()\n    pipeline_options.artifacts_path\
          \ = artifacts_path_p\n    pipeline_options.do_ocr = True\n    pipeline_options.do_table_structure\
          \ = True\n    pipeline_options.table_structure_options.do_cell_matching\
          \ = True\n    pipeline_options.table_structure_options.mode = TableFormerMode.ACCURATE\n\
          \    pipeline_options.generate_page_images = True\n\n    backend_to_impl\
          \ = {\n        PdfBackend.PYPDFIUM2.value: (\n            \"docling.backend.pypdfium2_backend\"\
          ,\n            \"PyPdfiumDocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V1.value:\
          \ (\n            \"docling.backend.docling_parse_backend\",\n          \
          \  \"DoclingParseDocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V2.value:\
          \ (\n            \"docling.backend.docling_parse_v2_backend\",\n       \
          \     \"DoclingParseV2DocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V4.value:\
          \ (\n            \"docling.backend.docling_parse_v4_backend\",\n       \
          \     \"DoclingParseV4DocumentBackend\",\n        ),\n    }\n\n    module_name,\
          \ class_name = backend_to_impl[pdf_backend]\n    backend_class = getattr(import_module(module_name),\
          \ class_name)\n\n    doc_converter = DocumentConverter(\n        format_options={\n\
          \            InputFormat.PDF: PdfFormatOption(\n                pipeline_options=pipeline_options,\n\
          \                backend=backend_class,\n            )\n        }\n    )\n\
          \n    easyocr_path_p = artifacts_path_p / \"EasyOcr\"\n    os.environ[\"\
          MODULE_PATH\"] = str(easyocr_path_p)\n    os.environ[\"EASYOCR_MODULE_PATH\"\
          ] = str(easyocr_path_p)\n\n    results = doc_converter.convert_all(input_pdfs,\
          \ raises_on_error=True)\n\n    for result in results:\n        doc_filename\
          \ = result.input.file.stem\n\n        output_json_path = output_path_p /\
          \ f\"{doc_filename}.json\"\n        print(f\"docling-convert: saving {output_json_path}\"\
          , flush=True)\n        result.document.save_as_json(output_json_path, image_mode=ImageRefMode.PLACEHOLDER)\n\
          \n        output_md_path = output_path_p / f\"{doc_filename}.md\"\n    \
          \    print(f\"docling-convert: saving {output_md_path}\", flush=True)\n\
          \        result.document.save_as_markdown(output_md_path, image_mode=ImageRefMode.PLACEHOLDER)\n\
          \n    print(\"docling-convert: done\", flush=True)\n\n"
        image: quay.io/fabianofranz/docling:v2.43.0
        resources:
          cpuLimit: 4.0
          cpuRequest: 0.5
          memoryLimit: 6.0
          memoryRequest: 1.0
          resourceCpuLimit: '4'
          resourceCpuRequest: 500m
          resourceMemoryLimit: 6G
          resourceMemoryRequest: 1G
    exec-download-docling-models:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_docling_models
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_docling_models(\n    output_path: dsl.Output[dsl.Artifact],\n\
          ):\n    \"\"\"\n    Download Docling models.\n\n    Args:\n        output_path:\
          \ Path to the output directory for Docling models.\n    \"\"\"\n    from\
          \ pathlib import Path\n    from docling.utils.model_downloader import download_models\n\
          \n    output_path_p = Path(output_path.path)\n\n    output_path_p.mkdir(parents=True,\
          \ exist_ok=True)\n\n    download_models(\n        output_dir=output_path_p,\n\
          \        progress=True,\n        with_layout=True,\n        with_tableformer=True,\n\
          \        with_easyocr=True,\n    )\n\n"
        image: quay.io/fabianofranz/docling:v2.43.0
    exec-import-pdfs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - import_pdfs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'requests'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef import_pdfs(\n    pdf_base_url: str,\n    pdf_filenames: str,\n\
          \    output_path: dsl.Output[dsl.Artifact],\n):\n    \"\"\"\n    Import\
          \ PDF filenames (comma-separated) from specified base URL.\n\n    Args:\n\
          \        base_url: Base URL of the PDF files.\n        pdf_filenames: List\
          \ of PDF filenames to import.\n        output_path: Path to the output directory\
          \ for the PDF files.\n    \"\"\"\n    from pathlib import Path\n    import\
          \ requests\n\n    output_path_p = Path(output_path.path)\n    output_path_p.mkdir(parents=True,\
          \ exist_ok=True)\n\n    if not pdf_base_url:\n        raise ValueError(\"\
          base_url must be provided\")\n\n    filenames = [name.strip() for name in\
          \ pdf_filenames.split(\",\") if name.strip()]\n    if not filenames:\n \
          \       raise ValueError(\"pdf_filenames must contain at least one filename\
          \ (comma-separated)\")\n\n    for name in filenames:\n        url = f\"\
          {pdf_base_url.rstrip('/')}/{name.lstrip('/')}\"\n        dest = output_path_p\
          \ / name\n        print(f\"import-test-pdfs: downloading {url} -> {dest}\"\
          , flush=True)\n        with requests.get(url, stream=True, timeout=30) as\
          \ resp:\n            resp.raise_for_status()\n            with dest.open(\"\
          wb\") as f:\n                for chunk in resp.iter_content(chunk_size=8192):\n\
          \                    if chunk:\n                        f.write(chunk)\n\
          \    print(\"import-test-pdfs: done\", flush=True)\n\n"
        image: python:3.11
pipelineInfo:
  description: Docling convert pipeline by the Data Processing Team
  name: data-processing-docling-pipeline
root:
  dag:
    tasks:
      create-pdf-splits:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-create-pdf-splits
        dependentTasks:
        - import-pdfs
        inputs:
          artifacts:
            input_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-pdfs
          parameters:
            num_splits:
              componentInputParameter: num_splits
        taskInfo:
          name: create-pdf-splits
      download-docling-models:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-docling-models
        taskInfo:
          name: download-docling-models
      for-loop-1:
        componentRef:
          name: comp-for-loop-1
        dependentTasks:
        - create-pdf-splits
        - download-docling-models
        - import-pdfs
        inputs:
          artifacts:
            pipelinechannel--download-docling-models-output_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: download-docling-models
            pipelinechannel--import-pdfs-output_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-pdfs
          parameters:
            pipelinechannel--create-pdf-splits-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: create-pdf-splits
            pipelinechannel--pdf_backend:
              componentInputParameter: pdf_backend
        parameterIterator:
          itemInput: pipelinechannel--create-pdf-splits-Output-loop-item
          items:
            inputParameter: pipelinechannel--create-pdf-splits-Output
        taskInfo:
          name: for-loop-1
      import-pdfs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-import-pdfs
        inputs:
          parameters:
            pdf_base_url:
              componentInputParameter: pdf_base_url
            pdf_filenames:
              componentInputParameter: pdf_filenames
        taskInfo:
          name: import-pdfs
  inputDefinitions:
    parameters:
      num_splits:
        defaultValue: 3.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      pdf_backend:
        defaultValue: dlparse_v4
        isOptional: true
        parameterType: STRING
      pdf_base_url:
        defaultValue: https://github.com/docling-project/docling/raw/v2.43.0/tests/data/pdf
        isOptional: true
        parameterType: STRING
      pdf_filenames:
        defaultValue: 2203.01017v2.pdf,2206.01062.pdf,2305.03393v1-pg9.pdf,2305.03393v1.pdf,amt_handbook_sample.pdf,code_and_formula.pdf,multi_page.pdf,redp5110_sampled.pdf
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.2
